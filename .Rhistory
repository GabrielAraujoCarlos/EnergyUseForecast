library(ggplot2)
library(dplyr)
library(ggplot2)
library(dplyr)
# Load the dataset
data <- read.csv("projeto8-training.csv")
summary(data)
# Create a boxplot of the sensor readings
ggplot(data, aes(x = "Sensor Reading", y = "Value")) +
geom_boxplot()
library(ggmap)
ggmap(get_map("world", zoom = 2)) +
geom_point(data = data, aes(x = "Longitude", y = "Latitude"))
data
view(data)
view(data)
print(data)
table(data)
View(data)
colnames(data)
names(data)
library(randomForest)
# Create a RandomForest model
model <- randomForest(Appliances ~ ., data = data, ntree = 500)
install.packages("randomForest")
library(randomForest)
# Create a RandomForest model
model <- randomForest(Appliances ~ ., data = data, ntree = 500)
# Get the importance of the features
importance <- importance(model)
# Get the importance of the features
importance <- importance(model)
# Sort the features by importance
importance <- importance[order(importance$MeanDecreaseAccuracy, decreasing = TRUE), ]
# Print the top 10 features
print(importance[1:10, ])
# Print the top 10 features
print(importance[1:10, ])
importance <- importance(model)
# Sort the features by importance
importance <- importance[order(importance$MeanDecreaseAccuracy, decreasing = TRUE), ]
importance <- importance[order(importance$MeanDecreaseAccuracy, decreasing = TRUE), ]
print(importance[1:10, ])
new_data <- data %>%
mutate(total_power = Appliances + lights) %>%
select(-Appliances, -lights)
# Print the new dataset
print(new_data)
# Print the new dataset
View(new_data)
# Create a RandomForest model
model <- randomForest(total_power ~ ., data = new_data, ntree = 500)
# Get the importance of the features
importance <- importance(model)
# Sort the features by importance
importance <- importance[order(importance$MeanDecreaseAccuracy, decreasing = TRUE), ]
# Sort the features by importance
importance <- importance[order(importance$MeanDecreaseAccuracy, decreasing = TRUE), ]
importance <- importance[order(importance$MeanDecreaseAccuracy, decreasing = TRUE), ]
print(importance)
importance <- importance %>%
arrange(desc(MeanDecreaseAccuracy))
# Convert the importance object to a data frame
importance <- as.data.frame(importance)
# Sort the features by importance
importance <- importance %>%
arrange(desc(MeanDecreaseAccuracy))
# Convert the importance object to a data frame
importance <- as.data.frame(importance)
importance <- importance %>%
arrange(desc(MeanDecreaseAccuracy))
# Get the importance of the features
importance <- importance(model)
colnames(importance)[colnames(importance) == "MeanDecreaseAccuracy"] <- "Importance"
# Sort the features by importance
importance <- importance %>%
arrange(desc(Importance))
importance <- importance(model)
# Rename the MeanDecreaseAccuracy column
colnames(importance)[colnames(importance) == "MeanDecreaseAccuracy"] <- "Importance"
# Convert the importance object to a data frame
importance <- as.data.frame(importance)
# Sort the features by importance
importance <- importance[order(desc(Importance)), ]
importance <- importance[order(desc(importance)), ]
importance <- importance(model)
# Print the top 10 features
#print(importance[1:10, ])
print(importance)
importance <- importance[order(desc(importance))]
# Print the top 10 features
#print(importance[1:10, ])
print(importance)
importance <- importance(model)
# Print the top 10 features
#print(importance[1:10, ])
print(importance)
